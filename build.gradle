/*
 * Copyright (c) 2017. Jan Wiemer
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.cyclonedx.bom' version '1.8.0'
}

group = "org.jacis"
version = Boolean.getBoolean("releasebuild") ? "$version" : Boolean.getBoolean("usedateversion") ? "$version" + "-build" + getDate() + "-SNAPSHOT" : "$version-SNAPSHOT"

def getDate() {
    return new Date().format('yyyyMMdd') // .format('yyyyMMddHHmmss')
}

ext {
    projectName = "jacis"
    projectDescription = "Java ACS Store - Transient and transactional store for Java objects."
    projectURL = "https://github.com/JanWiemer/jacis"
    author = "Jan Wiemer"
    authorId = "JanWiemer"
    authorMail = "jan@wiemer.nrw"
    licenseName = "Apache-2.0 License"
    licenseURL = "https://github.com/JanWiemer/jacis/blob/master/LICENSE"
    isReleaseVersion = Boolean.getBoolean("releasebuild")
    deploy_user = System.properties.get("deploy_user")
    deploy_pw = System.properties.get("deploy_pw")
    deploy_repo_release = System.properties.get("deploy_repo_release")
    deploy_repo_snapshot = System.properties.get("deploy_repo_snapshot")
}

print '---------- JACIS BUILD -------- '
println new Date()
println "- projectName = $projectName     ($projectDescription - URL = $projectURL)"
println "- group       = $group"
println "- version     = $version     (isReleaseVersion = $isReleaseVersion)"
println "- author      = $author     (mail = $authorMail)"
println "- licenseName = $licenseName     (URL  = $licenseURL)"
//println "- deploy_user = $deploy_user"
//println "- deploy_repo_release  = $deploy_repo_release"
//println "- deploy_repo_snapshot = $deploy_repo_snapshot"
//println "- root directory = ${rootDir}"
println '------------------------------- '

dependencies {
    // --- logging
    implementation group: 'org.slf4j', name: 'slf4j-api', version: version_slf4j
    testRuntimeOnly group: 'ch.qos.logback', name: 'logback-core', version: version_logback
    testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: version_logback
    // --- transaction
    implementation group: 'javax.transaction', name: 'jta', version: '1.1'
    // --- EXTENSION JetBrains Xodus
    compileOnly group: 'org.jetbrains.xodus', name: 'xodus-openAPI', version: version_xodus
    compileOnly group: 'org.jetbrains.xodus', name: 'xodus-environment', version: version_xodus
    testImplementation group: 'org.jetbrains.xodus', name: 'xodus-openAPI', version: version_xodus
    testImplementation group: 'org.jetbrains.xodus', name: 'xodus-environment', version: version_xodus
    // --- EXTENSION microstream persistence
    compileOnly group: 'org.eclipse.store', name: 'storage-embedded', version: version_eclipse_store
    // --- UTILITIES
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: version_jackson
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: version_jackson
    // --- junit
    testImplementation group: 'junit', name: 'junit', version: version_junit
}

clean.doFirst {
    delete "${rootDir}/var/"
    delete "${rootDir}/log/"
}

repositories {
    mavenLocal()
    mavenCentral()
}

java {
    sourceCompatibility = 11
    withJavadocJar()
    withSourcesJar()
}

jar {
    exclude 'logback.xml'
}

jar.doFirst {
    manifest {
        attributes 'Implementation-Title': projectName,
                'Implementation-Version': archiveVersion,
                'Specification-Title': new Date(),
                'Implementation-Vendor': author
    }
}

test {
    afterSuite { desc, result ->
        if (!desc.parent)
            println("${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} successes, " +
                    "${result.failedTestCount} failures, " +
                    "${result.skippedTestCount} skipped)")
    }
}

publishing {
    publications {
        jacisPublication(MavenPublication) {
            groupId "$group"
            artifactId "$projectName"
            version "$version"
            from components.java
            pom {
                name = projectName
                description = projectDescription
                url = projectURL
                licenses {
                    license {
                        name = licenseName
                        url = licenseURL
                    }
                }
                developers {
                    developer {
                        id = authorId
                        name = author
                        email = authorMail
                    }
                }
            }
        }
    }
    repositories {
        maven {
//            credentials {
//                username deploy_user
//                password deploy_pw
//            }
            credentials(PasswordCredentials)
            if (isReleaseVersion) {
                url deploy_repo_release
            } else {
                url deploy_repo_snapshot
            }
            allowInsecureProtocol = true
        }
    }
}
